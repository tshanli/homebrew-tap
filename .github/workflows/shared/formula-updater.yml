name: Generic Formula Updater

on:
  workflow_call:
    inputs:
      formula_name:
        required: true
        type: string
        description: "Name of the formula to update"
      update_data:
        required: true
        type: string
        description: "JSON data containing update information"
      update_type:
        required: true
        type: string
        description: "Type of update: version_only, commit_and_version, or binary_checksums"
      binary_config:
        required: false
        type: string
        description: "JSON config for binary downloads (for binary_checksums type)"
    outputs:
      updated:
        description: "Whether the formula was updated"
        value: ${{ jobs.update.outputs.updated }}
      changes_summary:
        description: "Summary of changes made"
        value: ${{ jobs.update.outputs.changes_summary }}

jobs:
  update:
    runs-on: ubuntu-latest
    outputs:
      updated: ${{ steps.update-formula.outputs.updated }}
      changes_summary: ${{ steps.update-formula.outputs.changes_summary }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"

      - name: Update formula
        id: update-formula
        run: |
          FORMULA_FILE="Formula/${{ inputs.formula_name }}.rb"
          UPDATE_DATA='${{ inputs.update_data }}'

          if [ "${{ inputs.update_type }}" == "version_only" ]; then
            VERSION=$(echo "$UPDATE_DATA" | jq -r '.version')
            sed -i "s/version '[^']*'/version \"$VERSION\"/" "$FORMULA_FILE"
            CHANGES="Updated version to $VERSION"

          elif [ "${{ inputs.update_type }}" == "commit_and_version" ]; then
            VERSION=$(echo "$UPDATE_DATA" | jq -r '.version')
            COMMIT=$(echo "$UPDATE_DATA" | jq -r '.short_commit')

            sed -i "s/version '[^']*'/version \"$VERSION\"/" "$FORMULA_FILE"
            sed -i "s/commit_hash = '[^']*'/commit_hash = '$COMMIT'/" "$FORMULA_FILE"
            CHANGES="Updated to version $VERSION (commit: $COMMIT)"

          elif [ "${{ inputs.update_type }}" == "binary_checksums" ]; then
            VERSION=$(echo "$UPDATE_DATA" | jq -r '.version')
            BINARY_CONFIG='${{ inputs.binary_config }}'

            # Download binaries and calculate checksums
            cd /tmp
            PLATFORMS=$(echo "$BINARY_CONFIG" | jq -r '.platforms[]')

            declare -A CHECKSUMS
            for PLATFORM in $PLATFORMS; do
              PLATFORM_CONFIG=$(echo "$BINARY_CONFIG" | jq -r ".platform_configs[\"$PLATFORM\"]")
              URL_TEMPLATE=$(echo "$PLATFORM_CONFIG" | jq -r '.url_template')
              FILENAME=$(echo "$PLATFORM_CONFIG" | jq -r '.filename')

              # Replace version placeholder in URL
              URL=$(echo "$URL_TEMPLATE" | sed "s/\$VERSION/$VERSION/g")

              echo "Downloading $FILENAME from $URL"
              curl -L -o "$FILENAME" "$URL"
              CHECKSUM=$(shasum -a 256 "$FILENAME" | cut -d' ' -f1)
              CHECKSUMS[$PLATFORM]=$CHECKSUM
              echo "$PLATFORM checksum: $CHECKSUM"
            done

            cd $GITHUB_WORKSPACE

            # Update version
            sed -i "s/version '[^']*'/version \"$VERSION\"/" "$FORMULA_FILE"

            # Update checksums using platform-specific patterns
            for PLATFORM in $PLATFORMS; do
              PLATFORM_CONFIG=$(echo "$BINARY_CONFIG" | jq -r ".platform_configs[\"$PLATFORM\"]")
              PATTERN=$(echo "$PLATFORM_CONFIG" | jq -r '.pattern')
              CHECKSUM=${CHECKSUMS[$PLATFORM]}

              # Use more robust sed replacement
              sed -i "/$PATTERN/,/sha256/ { /sha256/ s/sha256 \"[^\"]*\"/sha256 \"$CHECKSUM\"/; }" "$FORMULA_FILE"
            done

            CHANGES="Updated to version $VERSION with new checksums for all platforms"
          fi

          # Validate syntax
          ruby -c "$FORMULA_FILE"

          echo "updated=true" >> $GITHUB_OUTPUT
          echo "changes_summary=$CHANGES" >> $GITHUB_OUTPUT
          echo "Changes: $CHANGES"

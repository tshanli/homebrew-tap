name: PR Manager

on:
  workflow_call:
    inputs:
      updates:
        required: true
        type: string
        description: "JSON array of update information"
      pr_title_prefix:
        required: false
        type: string
        description: "Prefix for PR title"
        default: "Auto-update formulas"

jobs:
  create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate PR content
        id: generate-content
        run: |
          UPDATES='${{ inputs.updates }}'

          # Generate commit message
          COMMIT_MSG="${{ inputs.pr_title_prefix }}:"
          for update in $(echo "$UPDATES" | jq -r '.[] | @base64'); do
            UPDATE=$(echo "$update" | base64 --decode)
            FORMULA=$(echo "$UPDATE" | jq -r '.formula')
            VERSION=$(echo "$UPDATE" | jq -r '.version')
            COMMIT_MSG="$COMMIT_MSG $FORMULA to $VERSION;"
          done

          # Generate PR title
          UPDATE_COUNT=$(echo "$UPDATES" | jq length)
          if [ "$UPDATE_COUNT" -eq 1 ]; then
            FORMULA=$(echo "$UPDATES" | jq -r '.[0].formula')
            VERSION=$(echo "$UPDATES" | jq -r '.[0].version')
            PR_TITLE="Update $FORMULA to $VERSION"
          else
            PR_TITLE="${{ inputs.pr_title_prefix }} ($UPDATE_COUNT formulas)"
          fi

          # Generate PR body
          PR_BODY="ðŸ¤– Automated update of Homebrew formulas

          **Changes Made:**"

          for update in $(echo "$UPDATES" | jq -r '.[] | @base64'); do
            UPDATE=$(echo "$update" | base64 --decode)
            FORMULA=$(echo "$UPDATE" | jq -r '.formula')
            CHANGES=$(echo "$UPDATE" | jq -r '.changes_summary')
            REPO=$(echo "$UPDATE" | jq -r '.repository // "N/A"')

            PR_BODY="$PR_BODY
          ### ðŸ”„ $FORMULA
          $CHANGES"

            if [ "$REPO" != "N/A" ]; then
              if [[ "$CHANGES" == *"commit"* ]]; then
                PR_BODY="$PR_BODY
          [View latest commits](https://github.com/$REPO/commits)"
              else
                PR_BODY="$PR_BODY
          [View latest release](https://github.com/$REPO/releases/latest)"
              fi
            fi
            PR_BODY="$PR_BODY
          "
          done

          PR_BODY="$PR_BODY
          **Testing Commands:**
          \`\`\`bash"

          for update in $(echo "$UPDATES" | jq -r '.[] | @base64'); do
            UPDATE=$(echo "$update" | base64 --decode)
            FORMULA=$(echo "$UPDATE" | jq -r '.formula')
            PR_BODY="$PR_BODY
          brew install --build-from-source ./Formula/$FORMULA.rb"
          done

          PR_BODY="$PR_BODY
          \`\`\`

          **Status:**
          - âœ… All formulas passed syntax validation
          - âœ… Checksums verified for binary downloads
          - ðŸ§ª Ready for testing and merge"

          # Output results
          echo "commit_message=$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT

          # Handle multiline PR body
          echo "pr_body<<EOF" >> $GITHUB_OUTPUT
          echo "$PR_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: ${{ steps.generate-content.outputs.commit_message }}
          title: ${{ steps.generate-content.outputs.pr_title }}
          body: ${{ steps.generate-content.outputs.pr_body }}
          branch: auto-update-${{ github.run_number }}
          delete-branch: true

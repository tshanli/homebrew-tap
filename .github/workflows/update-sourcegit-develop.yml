name: Update SourceGit Develop Formula

on:
  workflow_dispatch: # Allow manual trigger
  workflow_call: # Allow reuse by other workflows
    outputs:
      needs_update:
        description: "Whether the formula needed an update"
        value: ${{ jobs.update-sourcegit-develop.outputs.needs_update }}
      new_version:
        description: "The new version that was updated to"
        value: ${{ jobs.update-sourcegit-develop.outputs.new_version }}
      changes_made:
        description: "Description of changes made"
        value: ${{ jobs.update-sourcegit-develop.outputs.changes_made }}

# Grant necessary permissions for the workflow
permissions:
  contents: write # Required to push commits
  actions: read # Required to read workflow artifacts

jobs:
  update-sourcegit-develop:
    runs-on: ubuntu-latest
    outputs:
      needs_update: ${{ steps.check-update.outputs.needs_update }}
      new_version: ${{ steps.check-update.outputs.new_version }}
      changes_made: ${{ steps.update-formula.outputs.changes_made }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # Ensure we can push commits
          persist-credentials: true

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"

      - name: Get latest commit from SourceGit develop branch
        id: get-commit
        run: |
          # Get the latest commit hash from the develop branch with error handling
          LATEST_COMMIT=$(curl -s --fail https://api.github.com/repos/sourcegit-scm/sourcegit/commits/develop | jq -r '.sha')
          if [ "$LATEST_COMMIT" = "null" ] || [ -z "$LATEST_COMMIT" ]; then
            echo "Failed to fetch latest commit information"
            exit 1
          fi
          echo "latest_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          echo "Latest commit: $LATEST_COMMIT"

          # Get short commit hash (first 7 characters)
          SHORT_COMMIT=${LATEST_COMMIT:0:7}
          echo "short_commit=$SHORT_COMMIT" >> $GITHUB_OUTPUT
          echo "Short commit: $SHORT_COMMIT"

          # Get commit date for version with error handling
          COMMIT_DATE=$(curl -s --fail https://api.github.com/repos/sourcegit-scm/sourcegit/commits/develop | jq -r '.commit.committer.date' | cut -d'T' -f1 | tr -d '-')
          if [ -z "$COMMIT_DATE" ]; then
            echo "Failed to extract commit date"
            exit 1
          fi
          echo "commit_date=$COMMIT_DATE" >> $GITHUB_OUTPUT
          echo "Commit date: $COMMIT_DATE"

      - name: Check if formula needs update
        id: check-update
        run: |
          # Get current commit hash from formula
          CURRENT_COMMIT=$(grep -o "commit_hash = '[^']*'" Formula/sourcegit-develop.rb | sed "s/commit_hash = '//; s/'//")
          if [ -z "$CURRENT_COMMIT" ]; then
            echo "Failed to extract current commit from formula"
            exit 1
          fi
          echo "Current commit in formula: $CURRENT_COMMIT"
          echo "current_commit=$CURRENT_COMMIT" >> $GITHUB_OUTPUT

          # Compare commits
          if [ "$CURRENT_COMMIT" != "${{ steps.get-commit.outputs.latest_commit }}" ] && [ "$CURRENT_COMMIT" != "${{ steps.get-commit.outputs.short_commit }}" ]; then
            echo "needs_update=true" >> $GITHUB_OUTPUT
            NEW_VERSION="${{ steps.get-commit.outputs.commit_date }}-${{ steps.get-commit.outputs.short_commit }}"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "Formula needs update to: $NEW_VERSION"
          else
            echo "needs_update=false" >> $GITHUB_OUTPUT
            echo "Formula is up to date"
          fi

      - name: Update formula
        id: update-formula
        if: steps.check-update.outputs.needs_update == 'true'
        run: |
          # Update the commit hash in the formula
          sed -i "s/commit_hash = '[^']*'/commit_hash = '${{ steps.get-commit.outputs.short_commit }}'/" Formula/sourcegit-develop.rb

          # Update version with date and short commit
          NEW_VERSION="${{ steps.get-commit.outputs.commit_date }}-${{ steps.get-commit.outputs.short_commit }}"
          sed -i "s/version '[^']*'/version '$NEW_VERSION'/" Formula/sourcegit-develop.rb

          echo "changes_made=Updated SourceGit develop to version $NEW_VERSION (commit: ${{ steps.get-commit.outputs.short_commit }})" >> $GITHUB_OUTPUT
          echo "Updated version to: $NEW_VERSION"

      - name: Validate updated formula
        if: steps.check-update.outputs.needs_update == 'true'
        run: |
          # Validate Ruby syntax
          ruby -c Formula/sourcegit-develop.rb
          echo "✅ Formula syntax is valid"

      - name: Commit and push changes
        if: steps.check-update.outputs.needs_update == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Formula/sourcegit-develop.rb
          git commit -m "Update SourceGit develop to commit ${{ steps.get-commit.outputs.short_commit }}"
          git push

      - name: Generate package summary
        if: always()
        run: |
          echo "### 🍺 SourceGit Develop" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check-update.outputs.needs_update }}" == "true" ]; then
            echo "✅ **Updated successfully**" >> $GITHUB_STEP_SUMMARY
            echo "- ${{ steps.update-formula.outputs.changes_made }}" >> $GITHUB_STEP_SUMMARY
            echo "- New version: \`${{ steps.check-update.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Test command:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "brew install --build-from-source ${{ github.repository_owner }}/homebrew-tap/sourcegit-develop" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏸️ **No update needed**" >> $GITHUB_STEP_SUMMARY
            echo "- Current version is already the latest" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
